{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","json","deck","textChange","bind","importDeck","event","this","setState","target","value","JSON","parse","forEach","deckCard","Cards","card","name","toLowerCase","Name","upgrades","Upgrades","length","class","key","map","i","upgrade","difficulty","mapName","Map","Difficulty","onChange","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2zqsBAuFeA,G,kBAlFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CAACC,KAAM,GAAIC,KAAM,IAE9B,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBANH,E,wEASRE,GACPC,KAAKC,SAAS,CAACP,KAAMK,EAAMG,OAAOC,U,iCAG3BJ,GACP,IAAMJ,EAAOS,KAAKC,MAAML,KAAKP,MAAMC,MAEnCC,EAAKW,QAAQ,SAAAC,GACTC,EAAMF,QAAQ,SAAAG,GACNF,EAASG,KAAKC,gBAAkBF,EAAKG,KAAKD,gBAC1CJ,EAASM,SAAWJ,EAAKK,cAKrCd,KAAKC,SAAS,CAACN,KAAMA,M,+BAIrB,OAAIK,KAAKP,MAAME,KAAKoB,OAAS,EAErB,2BAAOC,MAAM,UACT,+BACI,wBAAIC,IAAI,MACJ,4BAAI,oCACJ,4BAAI,yCACJ,4BAAI,yCACJ,4BAAI,0CAEPjB,KAAKP,MAAME,KAAKuB,IAAI,SAACT,EAAMU,GACxB,OACI,wBAAIF,IAAKE,GACL,4BAAKV,EAAKC,MACTD,EAAKI,SAASK,IAAI,SAACE,EAASD,GACzB,IAAIE,EAAa,GACbC,EAAU,IAcd,OAZmB,MAAfF,EAAQG,MACRD,EAAUF,EAAQG,IAAIX,KAES,IAA3BQ,EAAQG,IAAIC,WACZH,EAAa,aACqB,IAA3BD,EAAQG,IAAIC,WACnBH,EAAa,aACqB,IAA3BD,EAAQG,IAAIC,aACnBH,EAAa,aAKjB,wBAAIJ,IAAKE,GAAIG,EAAb,IAAuBD,UAYvD,yBAAKL,MAAM,UACP,gDACA,8BAAUA,MAAM,WAAWS,SAAUzB,KAAKJ,aAC1C,6BACI,4BAAQ8B,QAAS1B,KAAKF,YAAtB,gB,GA5ED6B,IAAMC,Y,MCIVC,MAJf,WACI,OAAO,kBAAC,EAAD,OCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9bdfb252.chunk.js","sourcesContent":["import React from 'react';\r\nimport Cards from './assets/cards.json';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {json: '', deck: []}\r\n\r\n        this.textChange = this.textChange.bind(this);\r\n        this.importDeck = this.importDeck.bind(this);\r\n    }\r\n\r\n    textChange(event) {\r\n        this.setState({json: event.target.value});\r\n    }\r\n\r\n    importDeck(event) {\r\n        const deck = JSON.parse(this.state.json)\r\n\r\n        deck.forEach(deckCard => {\r\n            Cards.forEach(card => {\r\n                if (deckCard.name.toLowerCase() === card.Name.toLowerCase()) {\r\n                    deckCard.upgrades = card.Upgrades\r\n                }\r\n            })\r\n        })\r\n\r\n        this.setState({deck: deck});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.deck.length > 0) {\r\n            return (\r\n                <table class='center'>\r\n                    <tbody>\r\n                        <tr key='-1'>\r\n                            <td><b>Name</b></td>\r\n                            <td><b>Upgrade 1</b></td>\r\n                            <td><b>Upgrade 2</b></td>\r\n                            <td><b>Upgrade 3</b></td>\r\n                        </tr>\r\n                        {this.state.deck.map((card, i) => {\r\n                            return(\r\n                                <tr key={i}>\r\n                                    <td>{card.name}</td>\r\n                                    {card.upgrades.map((upgrade, i) => {\r\n                                        var difficulty = ''\r\n                                        var mapName = '-'\r\n\r\n                                        if (upgrade.Map != null) {\r\n                                            mapName = upgrade.Map.Name\r\n\r\n                                            if (upgrade.Map.Difficulty === 0) {\r\n                                                difficulty = '(Standard)'\r\n                                            } else if (upgrade.Map.Difficulty === 1) {\r\n                                                difficulty = '(Advanced)'\r\n                                            } else if (upgrade.Map.Difficulty === 2) {\r\n                                                difficulty = '(Expert)'\r\n                                            }\r\n                                        }\r\n                                        \r\n                                        return(\r\n                                            <td key={i}>{mapName} {difficulty}</td>\r\n                                        )\r\n                                    })}\r\n                                </tr>\r\n                            )\r\n                        })}                        \r\n                    </tbody>\r\n                </table>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div class='center'>\r\n                <h1>Import your deck</h1>\r\n                <textarea class='textarea' onChange={this.textChange} />\r\n                <div>\r\n                    <button onClick={this.importDeck}>Import</button>\r\n                </div>\r\n            </div>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport Home from './Home.js'\nimport './App.css';\n\nfunction App() {\n    return <Home />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}